@charset "utf-8";
$divide: 10;
$pswWidth: 640;
$ppr: 640px/$divide/1rem;// 定义单位
$pprVal: 640/10;

// https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
@mixin toRem($property, $values...) {
    $max: length($values);
    $remValues: '';
    @for $i from 1 through $max {
        $value: nth($values, $i) * $divide / $pswWidth;
        $remValues: #{$remValues + $value}rem;
        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }
    #{$property}: $remValues;
}

@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}

@function addRemUnit($val, $unit: px) {
    // @debug $val;
    @if $val !=0 {
        $val: $val/$pprVal;
        $val: $val + rem;
    }
    @return $val;
}

// 将图片精灵的图片大小和位置进行缩放。实现方式通过把单位由px变成rem
@mixin rem-sprite($sprites, $name) {
    background-repeat: no-repeat;
    background-image: sprite-url($sprites); //雪碧图路径
    background-position: addRemUnit(strip-units(nth(sprite-position($sprites, $name), 1))) addRemUnit(strip-units(nth(sprite-position($sprites, $name), 2)));
    background-size: sprite-width($sprites)/$ppr sprite-height($sprites)/$ppr;
}

@mixin rem-sprite-size($sprites, $name) {
    height: image-width(sprite-file($sprites, $name))/$ppr; //目标图片高度
    width: image-height(sprite-file($sprites, $name))/$ppr; //目标图片宽度
}

@mixin rem-sprite-pos($sprites, $name, $offset-x: 0, $offset-y: 0) {
    background-position: addRemUnit(strip-units(nth(sprite-position($sprites, $name), 1)) + $offset-x) addRemUnit(strip-units(nth(sprite-position($sprites, $name), 2)) + $offset-y);
}